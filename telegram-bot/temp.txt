import random
import logging
import gspread
import google.auth
import json
import sqlite3
import time
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)
from telegram import __version__ as TG_VER
try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]
if __version_info__ < (20, 0, 0, "alpha", 5):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
conn = sqlite3.connect("users2.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE users2 (id STRING , name STRING, bio STRING, linkedin STRING , intrest STRING)")
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
LINKEDIN ,  DESC ,NAME  , INTREST , INTREST2 , HELPER , GENDER  , SEARCH , SHOWREQ , DISPLAYUSER , DISPLAYOPTION= range(11)
users={}
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    users[str(update.effective_user.id)]={
        "name":"" , 
        "bio":"" , 
        "linkedin":"" , 
        "intrest_list":[] , 
        "potential_user":[] ,
        "user": {
            "id":"", 
            "name":"" , 
            "bio" : "" , 
            "linkedin":"" , 
            "intrest" : ""
        } ,
        "keys" : []  , 
        "size" : 0 , 
        "x" : 0 , 
        "temp" : []
    }
    await update.message.reply_text(
            "Hey there ! Welcome ! \n\n"
            "I'll help you find and grow you network! ðŸ¤–ðŸ¤–" 
            "Let me know your full name!"
    )   
    return  NAME

async def name (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    if(users[str(update.effective_user.id)]["name"]!=""):
        reply_keyboard = [["UPDATE CURRENT INTRESTS!", "FIND CONNECTIONS!", "SEE REQUESTS"]]
        await update.message.reply_text(
        "WELCOME BACK!" + users[str(update.effective_user.id)]["name"] + 
        "\nLET'S GET YOU BACK WHERE YOU HAD LEFT OFF!", 
        reply_markup=ReplyKeyboardMarkup(
        reply_keyboard, one_time_keyboard=True , input_field_placeholder="CHOOSE FROM THE BUTTONS BELOW ðŸ‘‡"
            ),
        )
        return HELPER
    else: 
        users[str(update.effective_user.id)]["name"]=update.message.text.capitalize()
        await update.message.reply_text(
        "Nice to meet you " + users[str(update.effective_user.id)]["name"] + "!\n"
        "Let me know about yourself ! This will help me to know you better and find better connections for you!"
        )
        return DESC

async def desc (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    users[str(update.effective_user.id)]["bio"]=update.message.text
    if(len(users[str(update.effective_user.id)]["bio"])<10):
        await update.message.reply_text(
            "That's to less , tell me more about yourself so I get to know you better!")
        return DESC
    elif(len(users[str(update.effective_user.id)]["bio"])>100):
        await update.message.reply_text(
            "WOAH ! THATS TOO MUCH , HOW ABOUT MAKING IT LESS TO 100 CHARS!?")
        return DESC
    else :
        await update.message.reply_text(
        "Good to know about you!\n" 
        "Now ! Enter your linkedin url so that people can connect with you through it!"
         )
        return LINKEDIN

async def linkedin (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    users[str(update.effective_user.id)]["linkedin"]=update.message.text
    if(users[str(update.effective_user.id)]["linkedin"].startswith("https://www.linkedin.com/")):
        await update.message.reply_text(
        "Great!\n"
        "Let me help you find people of similar intrest ! \n"
        "Share your three intrest areas sererated by commas \n\n\n" 
        "eg: crypto , tech  , web3\n"
        "you can change these interests later onðŸ˜„"
        )
        return INTREST

    await update.message.reply_text(
            "THAT DOSENT SEEM LIKE A VALID LINKEDIN URL , MAYBE TRY ENTERING YOUR LINKEDIN URL AGAIN!?"
    )
    return LINKEDIN

async def intrest (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    reply_keyboard = [["UPDATE CURRENT INTRESTS!", "FIND CONNECTIONS!", "SEE REQUESTS"]]
    if(len(users[str(update.effective_user.id)]["intrest_list"])==0):
        message=update.message.text
        message = message.replace(' ', '')
        users[str(update.effective_user.id)]["intrest_list"]=message
        cursor.execute("INSERT INTO users2 (id, name, bio , linkedin , intrest ) VALUES (?, ?, ?, ? , ?)", 
        (
        str(update.effective_user.id) , 
        users[str(update.effective_user.id)]["name"]  , 
        users[str(update.effective_user.id)]["bio"] , 
        users[str(update.effective_user.id)]["linkedin"] , 
        users[str(update.effective_user.id)]["intrest_list"] 
        
        ))
        conn.commit()
        updatedtext = json.dumps(message.split())
        await update.message.reply_text(
            "GOT TO KNOW YOUR INTREST  ðŸš€\n"
            "LETS GET YOU STARTED ðŸš€ ðŸš€" , 
            reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True , input_field_placeholder="CHOOSE FROM THE BUTTONS BELOW ðŸ‘‡"
            ),
        )
        return HELPER
    else:
        message=update.message.text
        message = message.replace(' ', '')
        users[str(update.effective_user.id)]["intrest_list"]=message
        x=str(update.effective_user.id)
        cursor.execute("UPDATE users2 SET intrest = ? WHERE id = ?" ,( message , str(update.effective_user.id)))
        conn.commit()
        await update.message.reply_text(
            "UPDATED YOUR INTREST , LESSGOO ðŸš€ \n"
            "LETS GET BACK WHERE YOU LEFT OFF\n" , 
            reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True , input_field_placeholder="CHOOSE FROM THE BUTTONS BELOW ðŸ‘‡"
            ),
        )
        return HELPER

#HELPER FUNCITON IS USED TO SHOW LIKE UK , WHERE TO GO AFTER SELECTING SOMETHING FROM THE INLINE KEYBOAD
async def helper (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global users
    option=update.message.text
    if(option=="UPDATE CURRENT INTRESTS!"):
        await update.message.reply_text(
       "lets updates your intrests\n\n PLEASE ENTER YOUR NEW INTRESTS BELOW"  ,  reply_markup=ReplyKeyboardRemove(),
        )
        return  INTREST
    elif(option=="FIND CONNECTIONS!"):
        await update.message.reply_text("FINDING USERS FOR YOU")
        x=str(update.effective_user.id)
        cursor.execute("SELECT intrest FROM users2 WHERE  id=?" , (x , ))
        rows = cursor.fetchone()
        message=rows[0]
        intrest_list=message.split(',')
        users[str(update.effective_user.id)]["user"]={}
        users[str(update.effective_user.id)]["x"]=0
        for i in intrest_list : 
            query = "SELECT * FROM users2 WHERE intrest LIKE '%{}%'".format(i)
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                id = row[0]
                name = row[1]
                bio = row[2]
                linkedin = row[3]
                intrest= row[4]
                users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["x"]]= {
                    "id" : id , 
                    "name": name,
                    "bio": bio,
                    "linkedin": linkedin,
                    "intrest": intrest
                }
                users[str(update.effective_user.id)]["x"]+=1
        if(len(users)==0):
            await update.message.reply_text("NO USERS FOUND , MAYBE TRY AGAIN LATER ?")
            return HELPER
        else : 
            # print("there are the potential user \n")
            # print(users[str(update.effective_user.id)]["user"])
            users[str(update.effective_user.id)]["keys"]=list( users[str(update.effective_user.id)]["user"].keys())
            random.shuffle(users[str(update.effective_user.id)]["keys"])
            users[str(update.effective_user.id)]["size"]=0
            return DISPLAYUSER

async def displayuser (update: Update, context: ContextTypes.DEFAULT_TYPE) :
    global users
    if(users[str(update.effective_user.id)]["size"]==len(users[str(update.effective_user.id)]["keys"])-1):
        reply_keyboard = [["UPDATE CURRENT INTRESTS!", "FIND CONNECTIONS!", "SEE REQUESTS"]]
        await update.message.reply_text("THATS ALL THE USERS WE FOUND , LETS GET BACK SHALL WE?" , 
           reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True , input_field_placeholder=""
            ),)
        return HELPER
    else :
        print(users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["keys"][users[str(update.effective_user.id)]["size"]]]["name"])
        users[str(update.effective_user.id)]["size"]+=1
        reply_keyboard = [["CONNECT" , "FIND MORE"]]
        await update.message.reply_text( "THINK I'VE FOUND A POTENTIAL USER FOR YOU"
            "FOUND A USER " + "\nNAME: " + users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["keys"][users[str(update.effective_user.id)]["size"]]]["name"]  +
        "\nBIO : " + users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["keys"][users[str(update.effective_user.id)]["size"]]]["bio"] + 
        "\nINTREST :" + users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["keys"][users[str(update.effective_user.id)]["size"]]]["intrest"] , 
                reply_markup=ReplyKeyboardMarkup(
                        reply_keyboard, one_time_keyboard=True , input_field_placeholder=""
        ) , )
        return DISPLAYOPTION


async def displayoption (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    option=update.message.text
    global users
    if(option=="FIND MORE") : 
        return DISPLAYUSER
    elif(option=="CONNECT"):
        reply_keyboard = [["UPDATE CURRENT INTRESTS!", "FIND CONNECTIONS!", "SEE REQUESTS"]]
        await update.message.reply_text("HERE IS THEIR LINKEDIN ID " + users[str(update.effective_user.id)]["user"][users[str(update.effective_user.id)]["keys"][users[str(update.effective_user.id)]["size"]]]["linkedin"],  
        reply_markup=ReplyKeyboardMarkup(
                        reply_keyboard, one_time_keyboard=True , input_field_placeholder=""
        ) , )
        return HELPER

def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token("5836666660:AAEcqyZd4p-pgRcxDoHQ-JMTiU3lfzxOnXY").build()
    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESC : [MessageHandler(filters.TEXT & ~filters.COMMAND, desc)],
            NAME : [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            LINKEDIN : [MessageHandler(filters.TEXT & ~filters.COMMAND, linkedin)],
            INTREST : [MessageHandler(filters.TEXT & ~filters.COMMAND, intrest)],
            HELPER : [MessageHandler(filters.Regex("^(UPDATE CURRENT INTRESTS!|FIND CONNECTIONS!|SEE REQUESTS)$"), helper)] , 
            DISPLAYUSER : [MessageHandler(filters.TEXT & ~filters.COMMAND, displayuser )] , 
            DISPLAYOPTION : [MessageHandler(filters.TEXT & ~filters.COMMAND, displayoption )] ,
            # INTREST2 : [MessageHandler(filters.TEXT & ~filters.COMMAND, intrest2)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)

    # Run the bot until the user presses Ctrl-C
    application.run_polling()


if __name__ == "__main__":
    main()

































# async def gender (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     user = update.message.from_user
#     await update.message.reply_text(
#         "COOL"
#         "COOL",
#     )
#     return ConversationHandler.END
# async def bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """Stores the info about the user and ends the conversation."""
#     user = update.message.from_user
#     logger.info("Bio of %s: %s", user.first_name, update.message.text)
#     await update.message.reply_text("Thank you! I hope we can talk again some day.")

#     return ConversationHandler.END




# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """Cancels and ends the conversation."""
#     user = update.message.from_user
#     logger.info("User %s canceled the conversation.", user.first_name)
#     await update.message.reply_text(
#         "Bye! I hope we can talk again some day.", reply_markup=ReplyKeyboardRemove()
#     )

#     return ConversationHandler.END
